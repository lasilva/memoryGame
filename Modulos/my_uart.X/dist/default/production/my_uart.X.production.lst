

Microchip Technology PIC LITE Macro Assembler V1.36 build -262312587 
                                                                                               Tue Apr 26 15:39:10 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     	;# 
    28  0001                     	;# 
    29  0002                     	;# 
    30  0003                     	;# 
    31  0004                     	;# 
    32  0005                     	;# 
    33  0006                     	;# 
    34  0007                     	;# 
    35  0008                     	;# 
    36  0009                     	;# 
    37  000A                     	;# 
    38  000B                     	;# 
    39  000C                     	;# 
    40  000D                     	;# 
    41  000E                     	;# 
    42  000E                     	;# 
    43  000F                     	;# 
    44  0010                     	;# 
    45  0011                     	;# 
    46  0012                     	;# 
    47  0013                     	;# 
    48  0014                     	;# 
    49  0015                     	;# 
    50  0015                     	;# 
    51  0016                     	;# 
    52  0017                     	;# 
    53  0018                     	;# 
    54  0019                     	;# 
    55  001A                     	;# 
    56  001B                     	;# 
    57  001B                     	;# 
    58  001C                     	;# 
    59  001D                     	;# 
    60  001E                     	;# 
    61  001F                     	;# 
    62  0081                     	;# 
    63  0085                     	;# 
    64  0086                     	;# 
    65  0087                     	;# 
    66  0088                     	;# 
    67  0089                     	;# 
    68  008C                     	;# 
    69  008D                     	;# 
    70  008E                     	;# 
    71  0091                     	;# 
    72  0092                     	;# 
    73  0093                     	;# 
    74  0094                     	;# 
    75  0098                     	;# 
    76  0099                     	;# 
    77  009C                     	;# 
    78  009D                     	;# 
    79  009E                     	;# 
    80  009F                     	;# 
    81  010C                     	;# 
    82  010D                     	;# 
    83  010E                     	;# 
    84  010F                     	;# 
    85  018C                     	;# 
    86  018D                     	;# 
    87  001F                     _ADCON0	set	31
    88  0007                     _PORTC	set	7
    89  001A                     _RCREG	set	26
    90  0019                     _TXREG	set	25
    91  00C4                     _CREN	set	196
    92  005F                     _GIE	set	95
    93  005E                     _PEIE	set	94
    94  0038                     _RC0	set	56
    95  0065                     _RCIF	set	101
    96  00C7                     _SPEN	set	199
    97  009F                     _ADCON1	set	159
    98  009C                     _CMCON	set	156
    99  0099                     _SPBRG	set	153
   100  0098                     _TXSTAbits	set	152
   101  04C2                     _BRGH	set	1218
   102  0465                     _RCIE	set	1125
   103  04C4                     _SYNC	set	1220
   104  0438                     _TRISC0	set	1080
   105  04C6                     _TX9	set	1222
   106  04C5                     _TXEN	set	1221
   107                           
   108                           	psect	strings
   109  016A                     __pstrings:	
   110  016A                     stringtab:	
   111  016A                     __stringtab:	
   112                           
   113                           ;	String table - string pointers are 1 byte each
   114  016A  1BFF               	btfsc	btemp+1,7
   115  016B  2974               	ljmp	stringcode
   116  016C  1383               	bcf	3,7
   117  016D  187F               	btfsc	btemp+1,0
   118  016E  1783               	bsf	3,7
   119  016F  0800               	movf	0,w
   120  0170  0A84               	incf	4,f
   121  0171  1903               	skipnz
   122  0172  0AFF               	incf	btemp+1,f
   123  0173  0008               	return
   124  0174                     stringcode:	
   125  0174                     stringdir:	
   126  0174  3001               	movlw	high stringdir
   127  0175  008A               	movwf	10
   128  0176  0804               	movf	4,w
   129  0177  0A84               	incf	4,f
   130  0178  0782               	addwf	2,f
   131  0179                     __stringbase:	
   132  0179  3400               	retlw	0
   133  017A                     __end_of__stringtab:	
   134  017A                     STR_4:	
   135  017A  340A               	retlw	10
   136  017B  344F               	retlw	79	;'O'
   137  017C  3420               	retlw	32	;' '
   138  017D  346E               	retlw	110	;'n'
   139  017E  3475               	retlw	117	;'u'
   140  017F  346D               	retlw	109	;'m'
   141  0180  3465               	retlw	101	;'e'
   142  0181  3472               	retlw	114	;'r'
   143  0182  346F               	retlw	111	;'o'
   144  0183  3420               	retlw	32	;' '
   145  0184  3464               	retlw	100	;'d'
   146  0185  3469               	retlw	105	;'i'
   147  0186  3467               	retlw	103	;'g'
   148  0187  3469               	retlw	105	;'i'
   149  0188  3474               	retlw	116	;'t'
   150  0189  3461               	retlw	97	;'a'
   151  018A  3464               	retlw	100	;'d'
   152  018B  346F               	retlw	111	;'o'
   153  018C  3420               	retlw	32	;' '
   154  018D  3466               	retlw	102	;'f'
   155  018E  346F               	retlw	111	;'o'
   156  018F  3469               	retlw	105	;'i'
   157  0190  3420               	retlw	32	;' '
   158  0191  343A               	retlw	58	;':'
   159  0192  3420               	retlw	32	;' '
   160  0193  3400               	retlw	0
   161  0194                     STR_2:	
   162  0194  342A               	retlw	42	;'*'
   163  0195  342A               	retlw	42	;'*'
   164  0196  342A               	retlw	42	;'*'
   165  0197  3420               	retlw	32	;' '
   166  0198  3449               	retlw	73	;'I'
   167  0199  346E               	retlw	110	;'n'
   168  019A  3469               	retlw	105	;'i'
   169  019B  3463               	retlw	99	;'c'
   170  019C  3469               	retlw	105	;'i'
   171  019D  3461               	retlw	97	;'a'
   172  019E  346E               	retlw	110	;'n'
   173  019F  3464               	retlw	100	;'d'
   174  01A0  346F               	retlw	111	;'o'
   175  01A1  3420               	retlw	32	;' '
   176  01A2  3455               	retlw	85	;'U'
   177  01A3  3441               	retlw	65	;'A'
   178  01A4  3452               	retlw	82	;'R'
   179  01A5  3454               	retlw	84	;'T'
   180  01A6  3420               	retlw	32	;' '
   181  01A7  342A               	retlw	42	;'*'
   182  01A8  342A               	retlw	42	;'*'
   183  01A9  342A               	retlw	42	;'*'
   184  01AA  340A               	retlw	10
   185  01AB  3400               	retlw	0
   186  01AC                     STR_3:	
   187  01AC  3444               	retlw	68	;'D'
   188  01AD  3469               	retlw	105	;'i'
   189  01AE  3467               	retlw	103	;'g'
   190  01AF  3469               	retlw	105	;'i'
   191  01B0  3474               	retlw	116	;'t'
   192  01B1  3465               	retlw	101	;'e'
   193  01B2  3420               	retlw	32	;' '
   194  01B3  3475               	retlw	117	;'u'
   195  01B4  346D               	retlw	109	;'m'
   196  01B5  3420               	retlw	32	;' '
   197  01B6  346E               	retlw	110	;'n'
   198  01B7  3475               	retlw	117	;'u'
   199  01B8  346D               	retlw	109	;'m'
   200  01B9  3465               	retlw	101	;'e'
   201  01BA  3472               	retlw	114	;'r'
   202  01BB  346F               	retlw	111	;'o'
   203  01BC  343A               	retlw	58	;':'
   204  01BD  340A               	retlw	10
   205  01BE  3400               	retlw	0
   206  01BF                     STR_1:	
   207  01BF  3441               	retlw	65	;'A'
   208  01C0  346C               	retlw	108	;'l'
   209  01C1  3465               	retlw	101	;'e'
   210  01C2  3472               	retlw	114	;'r'
   211  01C3  3474               	retlw	116	;'t'
   212  01C4  3461               	retlw	97	;'a'
   213  01C5  340A               	retlw	10
   214  01C6  3400               	retlw	0
   215  01C7                     STR_6:	
   216  01C7  3428               	retlw	40	;'('
   217  01C8  346E               	retlw	110	;'n'
   218  01C9  3475               	retlw	117	;'u'
   219  01CA  346C               	retlw	108	;'l'
   220  01CB  346C               	retlw	108	;'l'
   221  01CC  3429               	retlw	41	;')'
   222  01CD  3400               	retlw	0
   223  01CE                     STR_5:	
   224  01CE  3425               	retlw	37	;'%'
   225  01CF  3473               	retlw	115	;'s'
   226  01D0  340A               	retlw	10
   227  01D1  3400               	retlw	0
   228                           
   229                           ; #config settings
   230  0000                     
   231                           	psect	cinit
   232  0015                     start_initialization:	
   233  0015                     __initialization:	
   234                           
   235                           ; Clear objects allocated to COMMON
   236  0015  01F9               	clrf	__pbssCOMMON& (0+127)
   237                           
   238                           ; Clear objects allocated to BANK0
   239  0016  1383               	bcf	3,7	;select IRP bank0
   240  0017  3020               	movlw	low __pbssBANK0
   241  0018  0084               	movwf	4
   242  0019  3060               	movlw	low (__pbssBANK0+64)
   243  001A  120A  118A  2307   	fcall	clear_ram0
   244  001D                     end_of_initialization:	
   245                           ;End of C runtime variable initialization code
   246                           
   247  001D                     __end_of__initialization:	
   248  001D  0183               	clrf	3
   249  001E  120A  118A  29D2   	ljmp	_main	;jump to C main() function
   250                           
   251                           	psect	bssCOMMON
   252  0079                     __pbssCOMMON:	
   253  0079                     _getchar_active:	
   254  0079                     	ds	1
   255                           
   256                           	psect	bssBANK0
   257  0020                     __pbssBANK0:	
   258  0020                     _entrada:	
   259  0020                     	ds	64
   260                           
   261                           	psect	clrtext
   262  0307                     clear_ram0:	
   263                           ;	Called with FSR containing the base address, and
   264                           ;	W with the last address+1
   265                           
   266  0307  0064               	clrwdt	;clear the watchdog before getting into this loop
   267  0308                     clrloop0:	
   268  0308  0180               	clrf	0	;clear RAM location pointed to by FSR
   269  0309  0A84               	incf	4,f	;increment pointer
   270  030A  0604               	xorwf	4,w	;XOR with final address
   271  030B  1903               	btfsc	3,2	;have we reached the end yet?
   272  030C  3400               	retlw	0	;all done for this memory range, return
   273  030D  0604               	xorwf	4,w	;XOR again to restore value
   274  030E  2B08               	goto	clrloop0	;do the next byte
   275                           
   276                           	psect	cstackCOMMON
   277  0070                     __pcstackCOMMON:	
   278  0070                     ?_isdigit:	
   279  0070                     ?_putch:	
   280                           ; 1 bit 
   281                           
   282  0070                     ?_cgets:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ?_UART_init:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ?_getch:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ?_getche:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ?_pulse:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ?_manipula_entrada:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_interrupcao:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ??_interrupcao:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?_main:	
   307                           ; 1 bytes @ 0x0
   308                           
   309                           
   310                           ; 1 bytes @ 0x0
   311  0070                     	ds	4
   312  0074                     ??_putch:	
   313  0074                     ??_isdigit:	
   314                           ; 1 bytes @ 0x4
   315                           
   316  0074                     ??_UART_init:	
   317                           ; 1 bytes @ 0x4
   318                           
   319  0074                     ??_getch:	
   320                           ; 1 bytes @ 0x4
   321                           
   322  0074                     ??_pulse:	
   323                           ; 1 bytes @ 0x4
   324                           
   325  0074                     ?___wmul:	
   326                           ; 1 bytes @ 0x4
   327                           
   328  0074                     putch@byte:	
   329                           ; 2 bytes @ 0x4
   330                           
   331  0074                     _isdigit$367:	
   332                           ; 1 bytes @ 0x4
   333                           
   334  0074                     ___wmul@multiplier:	
   335                           ; 1 bytes @ 0x4
   336                           
   337                           
   338                           ; 2 bytes @ 0x4
   339  0074                     	ds	1
   340  0075                     ??_getche:	
   341  0075                     ?_printf:	
   342                           ; 1 bytes @ 0x5
   343                           
   344  0075                     getche@c:	
   345                           ; 2 bytes @ 0x5
   346                           
   347  0075                     isdigit@c:	
   348                           ; 1 bytes @ 0x5
   349                           
   350                           
   351                           ; 1 bytes @ 0x5
   352  0075                     	ds	1
   353  0076                     ??_printf:	
   354  0076                     ??_cgets:	
   355                           ; 1 bytes @ 0x6
   356                           
   357  0076                     ?_is_numeric:	
   358                           ; 1 bytes @ 0x6
   359                           
   360  0076                     ___wmul@multiplicand:	
   361                           ; 2 bytes @ 0x6
   362                           
   363                           
   364                           ; 2 bytes @ 0x6
   365  0076                     	ds	1
   366  0077                     pulse@number:	
   367                           
   368                           ; 1 bytes @ 0x7
   369  0077                     	ds	1
   370  0078                     ??_is_numeric:	
   371  0078                     ??___wmul:	
   372                           ; 1 bytes @ 0x8
   373                           
   374  0078                     pulse@i:	
   375                           ; 1 bytes @ 0x8
   376                           
   377                           
   378                           ; 1 bytes @ 0x8
   379  0078                     	ds	1
   380  0079                     ??_manipula_entrada:	
   381                           
   382                           	psect	cstackBANK0
   383  0060                     __pcstackBANK0:	
   384                           ; 1 bytes @ 0x9
   385                           
   386  0060                     printf@flag:	
   387  0060                     is_numeric@res:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0060                     ___wmul@product:	
   391                           ; 2 bytes @ 0x0
   392                           
   393  0060                     cgets@c:	
   394                           ; 2 bytes @ 0x0
   395                           
   396                           
   397                           ; 2 bytes @ 0x0
   398  0060                     	ds	1
   399  0061                     printf@ap:	
   400                           
   401                           ; 1 bytes @ 0x1
   402  0061                     	ds	1
   403  0062                     ?_atoi:	
   404  0062                     is_numeric@str:	
   405                           ; 2 bytes @ 0x2
   406                           
   407  0062                     printf@c:	
   408                           ; 1 bytes @ 0x2
   409                           
   410  0062                     cgets@s:	
   411                           ; 1 bytes @ 0x2
   412                           
   413                           
   414                           ; 1 bytes @ 0x2
   415  0062                     	ds	1
   416  0063                     cgets@s1:	
   417  0063                     printf@cp:	
   418                           ; 1 bytes @ 0x3
   419                           
   420                           
   421                           ; 2 bytes @ 0x3
   422  0063                     	ds	1
   423  0064                     ??_atoi:	
   424                           
   425                           ; 1 bytes @ 0x4
   426  0064                     	ds	1
   427  0065                     printf@f:	
   428                           
   429                           ; 1 bytes @ 0x5
   430  0065                     	ds	1
   431  0066                     atoi@sign:	
   432                           
   433                           ; 1 bytes @ 0x6
   434  0066                     	ds	1
   435  0067                     atoi@a:	
   436                           
   437                           ; 2 bytes @ 0x7
   438  0067                     	ds	2
   439  0069                     atoi@s:	
   440                           
   441                           ; 1 bytes @ 0x9
   442  0069                     	ds	1
   443  006A                     manipula_entrada@number:	
   444                           
   445                           ; 2 bytes @ 0xA
   446  006A                     	ds	2
   447  006C                     ??_main:	
   448                           
   449                           ; 1 bytes @ 0xC
   450  006C                     	ds	1
   451                           
   452                           	psect	maintext
   453  01D2                     __pmaintext:	
   454 ;;
   455 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   456 ;;
   457 ;; *************** function _main *****************
   458 ;; Defined at:
   459 ;;		line 17 in file "uart.c"
   460 ;; Parameters:    Size  Location     Type
   461 ;;		None
   462 ;; Auto vars:     Size  Location     Type
   463 ;;		None
   464 ;; Return value:  Size  Location     Type
   465 ;;                  1    wreg      void 
   466 ;; Registers used:
   467 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   468 ;; Tracked objects:
   469 ;;		On entry : B00/0
   470 ;;		On exit  : 0/0
   471 ;;		Unchanged: 0/0
   472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   473 ;;      Params:         0       0       0       0       0
   474 ;;      Locals:         0       0       0       0       0
   475 ;;      Temps:          0       1       0       0       0
   476 ;;      Totals:         0       1       0       0       0
   477 ;;Total ram usage:        1 bytes
   478 ;; Hardware stack levels required when called:    4
   479 ;; This function calls:
   480 ;;		_UART_init
   481 ;;		_cgets
   482 ;;		_manipula_entrada
   483 ;;		_printf
   484 ;; This function is called by:
   485 ;;		Startup code after reset
   486 ;; This function uses a non-reentrant model
   487 ;;
   488                           
   489                           
   490                           ;psect for function _main
   491  01D2                     _main:	
   492                           
   493                           ;uart.c: 18: TRISC0 = 0;
   494                           
   495                           ;incstack = 0
   496                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   497  01D2  1683               	bsf	3,5	;RP0=1, select bank1
   498  01D3  1303               	bcf	3,6	;RP1=0, select bank1
   499  01D4  1007               	bcf	7,0	;volatile
   500                           
   501                           ;uart.c: 19: PORTC = 0;
   502  01D5  1283               	bcf	3,5	;RP0=0, select bank0
   503  01D6  1303               	bcf	3,6	;RP1=0, select bank0
   504  01D7  0187               	clrf	7	;volatile
   505                           
   506                           ;uart.c: 20: UART_init();
   507  01D8  120A  118A  22C2  120A  118A  	fcall	_UART_init
   508                           
   509                           ;uart.c: 21: ADCON0 = 0x00;
   510  01DD  1283               	bcf	3,5	;RP0=0, select bank0
   511  01DE  1303               	bcf	3,6	;RP1=0, select bank0
   512  01DF  019F               	clrf	31	;volatile
   513                           
   514                           ;uart.c: 22: ADCON1 = 0x06;
   515  01E0  3006               	movlw	6
   516  01E1  1683               	bsf	3,5	;RP0=1, select bank1
   517  01E2  1303               	bcf	3,6	;RP1=0, select bank1
   518  01E3  009F               	movwf	31	;volatile
   519                           
   520                           ;uart.c: 23: CMCON = 0x07;
   521  01E4  3007               	movlw	7
   522  01E5  009C               	movwf	28	;volatile
   523                           
   524                           ;uart.c: 24: GIE=0x01;
   525  01E6  178B               	bsf	11,7	;volatile
   526                           
   527                           ;uart.c: 25: PEIE=0x01;
   528  01E7  170B               	bsf	11,6	;volatile
   529                           
   530                           ;uart.c: 27: printf("*** Iniciando UART ***\n");
   531  01E8  301B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   532  01E9  120A  118A  2092  120A  118A  	fcall	_printf
   533  01EE                     l1171:	
   534                           ;uart.c: 28: while(1){
   535                           
   536                           
   537                           ;uart.c: 29: printf("Digite um numero:\n");
   538  01EE  3033               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   539  01EF  120A  118A  2092  120A  118A  	fcall	_printf
   540                           
   541                           ;uart.c: 30: cgets(entrada);
   542  01F4  3020               	movlw	(low (_entrada| 0))& (0+255)
   543  01F5  120A  118A  2101  120A  118A  	fcall	_cgets
   544                           
   545                           ;uart.c: 31: printf("\nO numero digitado foi : ");
   546  01FA  3001               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   547  01FB  120A  118A  2092  120A  118A  	fcall	_printf
   548                           
   549                           ;uart.c: 32: printf("%s\n",entrada);
   550  0200  3020               	movlw	(low (_entrada| 0))& (0+255)
   551  0201  1283               	bcf	3,5	;RP0=0, select bank0
   552  0202  1303               	bcf	3,6	;RP1=0, select bank0
   553  0203  00EC               	movwf	??_main
   554  0204  086C               	movf	??_main,w
   555  0205  00F5               	movwf	?_printf
   556  0206  3055               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
   557  0207  120A  118A  2092  120A  118A  	fcall	_printf
   558                           
   559                           ;uart.c: 33: manipula_entrada();
   560  020C  120A  118A  228C  120A  118A  	fcall	_manipula_entrada
   561  0211  29EE               	goto	l1171
   562  0212                     __end_of_main:	
   563                           
   564                           	psect	text1
   565  028C                     __ptext1:	
   566 ;; *************** function _manipula_entrada *****************
   567 ;; Defined at:
   568 ;;		line 82 in file "functions_uart.h"
   569 ;; Parameters:    Size  Location     Type
   570 ;;		None
   571 ;; Auto vars:     Size  Location     Type
   572 ;;  number          2   10[BANK0 ] int 
   573 ;; Return value:  Size  Location     Type
   574 ;;                  1    wreg      void 
   575 ;; Registers used:
   576 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   577 ;; Tracked objects:
   578 ;;		On entry : 0/0
   579 ;;		On exit  : 0/0
   580 ;;		Unchanged: 0/0
   581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   582 ;;      Params:         0       0       0       0       0
   583 ;;      Locals:         0       2       0       0       0
   584 ;;      Temps:          0       0       0       0       0
   585 ;;      Totals:         0       2       0       0       0
   586 ;;Total ram usage:        2 bytes
   587 ;; Hardware stack levels used:    1
   588 ;; Hardware stack levels required when called:    3
   589 ;; This function calls:
   590 ;;		_atoi
   591 ;;		_is_numeric
   592 ;;		_printf
   593 ;;		_pulse
   594 ;; This function is called by:
   595 ;;		_main
   596 ;; This function uses a non-reentrant model
   597 ;;
   598                           
   599                           
   600                           ;psect for function _manipula_entrada
   601  028C                     _manipula_entrada:	
   602                           
   603                           ;functions_uart.h: 83: if(is_numeric(entrada)){
   604                           
   605                           ;incstack = 0
   606                           ; Regs used in _manipula_entrada: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   607  028C  3020               	movlw	(low (_entrada| 0))& (0+255)
   608  028D  120A  118A  223D  120A  118A  	fcall	_is_numeric
   609  0292  0876               	movf	?_is_numeric,w
   610  0293  0477               	iorwf	?_is_numeric+1,w
   611  0294  1903               	btfsc	3,2
   612  0295  2AA7               	goto	l1151
   613                           
   614                           ;functions_uart.h: 84: int number=atoi(entrada);
   615  0296  3020               	movlw	(low (_entrada| 0))& (0+255)
   616  0297  120A  118A  2021  120A  118A  	fcall	_atoi
   617  029C  1283               	bcf	3,5	;RP0=0, select bank0
   618  029D  1303               	bcf	3,6	;RP1=0, select bank0
   619  029E  0863               	movf	?_atoi+1,w
   620  029F  00EB               	movwf	manipula_entrada@number+1
   621  02A0  0862               	movf	?_atoi,w
   622  02A1  00EA               	movwf	manipula_entrada@number
   623                           
   624                           ;functions_uart.h: 85: pulse(number);
   625  02A2  086A               	movf	manipula_entrada@number,w
   626  02A3  120A  118A  2212   	fcall	_pulse
   627                           
   628                           ;functions_uart.h: 86: }else printf("Alerta\n");
   629  02A6  0008               	return
   630  02A7                     l1151:	
   631  02A7  3046               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   632  02A8  120A  118A  2092   	fcall	_printf
   633  02AB  0008               	return
   634  02AC                     __end_of_manipula_entrada:	
   635                           
   636                           	psect	text2
   637  0212                     __ptext2:	
   638 ;; *************** function _pulse *****************
   639 ;; Defined at:
   640 ;;		line 51 in file "functions_uart.h"
   641 ;; Parameters:    Size  Location     Type
   642 ;;  number          1    wreg     unsigned char 
   643 ;; Auto vars:     Size  Location     Type
   644 ;;  number          1    7[COMMON] unsigned char 
   645 ;;  i               1    8[COMMON] unsigned char 
   646 ;; Return value:  Size  Location     Type
   647 ;;                  1    wreg      void 
   648 ;; Registers used:
   649 ;;		wreg, status,2, status,0
   650 ;; Tracked objects:
   651 ;;		On entry : 0/0
   652 ;;		On exit  : 0/0
   653 ;;		Unchanged: 0/0
   654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   655 ;;      Params:         0       0       0       0       0
   656 ;;      Locals:         2       0       0       0       0
   657 ;;      Temps:          3       0       0       0       0
   658 ;;      Totals:         5       0       0       0       0
   659 ;;Total ram usage:        5 bytes
   660 ;; Hardware stack levels used:    1
   661 ;; Hardware stack levels required when called:    1
   662 ;; This function calls:
   663 ;;		Nothing
   664 ;; This function is called by:
   665 ;;		_manipula_entrada
   666 ;; This function uses a non-reentrant model
   667 ;;
   668                           
   669                           
   670                           ;psect for function _pulse
   671  0212                     _pulse:	
   672                           
   673                           ;incstack = 0
   674                           ; Regs used in _pulse: [wreg+status,2+status,0]
   675                           ;pulse@number stored from wreg
   676  0212  00F7               	movwf	pulse@number
   677                           
   678                           ;functions_uart.h: 52: char i;
   679                           ;functions_uart.h: 54: for(i=0;i<number;i++){
   680  0213  01F8               	clrf	pulse@i
   681  0214                     l931:	
   682  0214  0877               	movf	pulse@number,w
   683  0215  0278               	subwf	pulse@i,w
   684  0216  1803               	btfsc	3,0
   685  0217  0008               	return
   686                           
   687                           ;functions_uart.h: 55: RC0=0x01;
   688  0218  1283               	bcf	3,5	;RP0=0, select bank0
   689  0219  1303               	bcf	3,6	;RP1=0, select bank0
   690  021A  1407               	bsf	7,0	;volatile
   691                           
   692                           ;functions_uart.h: 56: _delay((unsigned long)((500)*(20000000/4000.0)));
   693  021B  300D               	movlw	13
   694  021C  00F6               	movwf	??_pulse+2
   695  021D  30AF               	movlw	175
   696  021E  00F5               	movwf	??_pulse+1
   697  021F  30C1               	movlw	193
   698  0220  00F4               	movwf	??_pulse
   699  0221                     u657:	
   700  0221  0BF4               	decfsz	??_pulse,f
   701  0222  2A21               	goto	u657
   702  0223  0BF5               	decfsz	??_pulse+1,f
   703  0224  2A21               	goto	u657
   704  0225  0BF6               	decfsz	??_pulse+2,f
   705  0226  2A21               	goto	u657
   706  0227  0000               	nop
   707                           
   708                           ;functions_uart.h: 57: RC0=0x00;
   709  0228  1283               	bcf	3,5	;RP0=0, select bank0
   710  0229  1303               	bcf	3,6	;RP1=0, select bank0
   711  022A  1007               	bcf	7,0	;volatile
   712                           
   713                           ;functions_uart.h: 58: _delay((unsigned long)((500)*(20000000/4000.0)));
   714  022B  300D               	movlw	13
   715  022C  00F6               	movwf	??_pulse+2
   716  022D  30AF               	movlw	175
   717  022E  00F5               	movwf	??_pulse+1
   718  022F  30C1               	movlw	193
   719  0230  00F4               	movwf	??_pulse
   720  0231                     u667:	
   721  0231  0BF4               	decfsz	??_pulse,f
   722  0232  2A31               	goto	u667
   723  0233  0BF5               	decfsz	??_pulse+1,f
   724  0234  2A31               	goto	u667
   725  0235  0BF6               	decfsz	??_pulse+2,f
   726  0236  2A31               	goto	u667
   727  0237  0000               	nop
   728  0238  3001               	movlw	1
   729  0239  00F4               	movwf	??_pulse
   730  023A  0874               	movf	??_pulse,w
   731  023B  07F8               	addwf	pulse@i,f
   732  023C  2A14               	goto	l931
   733  023D                     __end_of_pulse:	
   734                           
   735                           	psect	text3
   736  0092                     __ptext3:	
   737 ;; *************** function _printf *****************
   738 ;; Defined at:
   739 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\doprnt.c"
   740 ;; Parameters:    Size  Location     Type
   741 ;;  f               1    wreg     PTR const unsigned char 
   742 ;;		 -> STR_5(4), STR_4(26), STR_3(19), STR_2(24), 
   743 ;;		 -> STR_1(8), 
   744 ;; Auto vars:     Size  Location     Type
   745 ;;  f               1    5[BANK0 ] PTR const unsigned char 
   746 ;;		 -> STR_5(4), STR_4(26), STR_3(19), STR_2(24), 
   747 ;;		 -> STR_1(8), 
   748 ;;  tmpval          4    0        struct .
   749 ;;  cp              2    3[BANK0 ] PTR const unsigned char 
   750 ;;		 -> STR_6(7), entrada(64), 
   751 ;;  len             2    0        unsigned int 
   752 ;;  val             2    0        unsigned int 
   753 ;;  c               1    2[BANK0 ] char 
   754 ;;  ap              1    1[BANK0 ] PTR void [1]
   755 ;;		 -> ?_printf(2), 
   756 ;;  flag            1    0[BANK0 ] unsigned char 
   757 ;;  prec            1    0        char 
   758 ;; Return value:  Size  Location     Type
   759 ;;                  2    5[COMMON] int 
   760 ;; Registers used:
   761 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   762 ;; Tracked objects:
   763 ;;		On entry : 0/0
   764 ;;		On exit  : 0/0
   765 ;;		Unchanged: 0/0
   766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   767 ;;      Params:         1       0       0       0       0
   768 ;;      Locals:         0       6       0       0       0
   769 ;;      Temps:          1       0       0       0       0
   770 ;;      Totals:         2       6       0       0       0
   771 ;;Total ram usage:        8 bytes
   772 ;; Hardware stack levels used:    1
   773 ;; Hardware stack levels required when called:    2
   774 ;; This function calls:
   775 ;;		_putch
   776 ;; This function is called by:
   777 ;;		_manipula_entrada
   778 ;;		_main
   779 ;; This function uses a non-reentrant model
   780 ;;
   781                           
   782                           
   783                           ;psect for function _printf
   784  0092                     _printf:	
   785                           
   786                           ;incstack = 0
   787                           ; Regs used in _printf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   788                           ;printf@f stored from wreg
   789  0092  1283               	bcf	3,5	;RP0=0, select bank0
   790  0093  1303               	bcf	3,6	;RP1=0, select bank0
   791  0094  00E5               	movwf	printf@f
   792                           
   793                           ;doprnt.c: 466: va_list ap;
   794                           ;doprnt.c: 499: signed char c;
   795                           ;doprnt.c: 506: signed char prec;
   796                           ;doprnt.c: 508: unsigned char flag;
   797                           ;doprnt.c: 523: union {
   798                           ;doprnt.c: 524: unsigned long vd;
   799                           ;doprnt.c: 525: double integ;
   800                           ;doprnt.c: 526: } tmpval;
   801                           ;doprnt.c: 528: unsigned int val;
   802                           ;doprnt.c: 529: unsigned len;
   803                           ;doprnt.c: 530: const char * cp;
   804                           ;doprnt.c: 533: *ap = __va_start();
   805  0095  3075               	movlw	(low (?_printf| 0))& (0+255)
   806  0096  00F6               	movwf	??_printf
   807  0097  0876               	movf	??_printf,w
   808  0098  00E1               	movwf	printf@ap
   809  0099                     l1007:	
   810                           ;doprnt.c: 1422: {
   811                           
   812                           ;doprnt.c: 536: while(c = *f++) {
   813                           
   814  0099  3001               	movlw	1
   815  009A  1283               	bcf	3,5	;RP0=0, select bank0
   816  009B  1303               	bcf	3,6	;RP1=0, select bank0
   817  009C  07E5               	addwf	printf@f,f
   818  009D  30FF               	movlw	-1
   819  009E  0765               	addwf	printf@f,w
   820  009F  0084               	movwf	4
   821  00A0  120A  118A  2174  120A  118A  	fcall	stringdir
   822  00A5  00F6               	movwf	??_printf
   823  00A6  0876               	movf	??_printf,w
   824  00A7  00E2               	movwf	printf@c
   825  00A8  0862               	movf	printf@c,w
   826  00A9  1903               	btfsc	3,2
   827  00AA  0008               	return
   828                           
   829                           ;doprnt.c: 538: if(c != '%')
   830  00AB  3025               	movlw	37
   831  00AC  0662               	xorwf	printf@c,w
   832  00AD  1903               	btfsc	3,2
   833  00AE  28B6               	goto	l987
   834                           
   835                           ;doprnt.c: 540: {
   836                           ;doprnt.c: 541: (putch(c) );
   837  00AF  0862               	movf	printf@c,w
   838  00B0  120A  118A  22AC  120A  118A  	fcall	_putch
   839                           
   840                           ;doprnt.c: 542: continue;
   841  00B5  2899               	goto	l1007
   842  00B6                     l987:	
   843                           
   844                           ;doprnt.c: 543: }
   845                           ;doprnt.c: 548: flag = 0;
   846  00B6  1283               	bcf	3,5	;RP0=0, select bank0
   847  00B7  1303               	bcf	3,6	;RP1=0, select bank0
   848  00B8  01E0               	clrf	printf@flag
   849                           
   850                           ;doprnt.c: 635: switch(c = *f++) {
   851  00B9  28ED               	goto	l1005
   852  00BA                     l989:	
   853                           ;doprnt.c: 728: case 's':
   854                           
   855                           ;doprnt.c: 638: goto alldone;
   856                           
   857                           ;doprnt.c: 637: case 0:
   858                           
   859                           
   860                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
   861  00BA  0861               	movf	printf@ap,w
   862  00BB  0084               	movwf	4
   863  00BC  0800               	movf	0,w
   864  00BD  00E3               	movwf	printf@cp
   865  00BE  3000               	movlw	0
   866  00BF  00E4               	movwf	printf@cp+1
   867  00C0  3001               	movlw	1
   868  00C1  00F6               	movwf	??_printf
   869  00C2  0876               	movf	??_printf,w
   870  00C3  07E1               	addwf	printf@ap,f
   871                           
   872                           ;doprnt.c: 740: if(!cp)
   873  00C4  0863               	movf	printf@cp,w
   874  00C5  0464               	iorwf	printf@cp+1,w
   875  00C6  1D03               	btfss	3,2
   876  00C7  28CC               	goto	l1001
   877                           
   878                           ;doprnt.c: 741: cp = "(null)";
   879  00C8  304E               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
   880  00C9  00E3               	movwf	printf@cp
   881  00CA  3080               	movlw	128
   882  00CB  00E4               	movwf	printf@cp+1
   883  00CC                     l1001:	
   884                           ;doprnt.c: 777: while(*cp)
   885                           
   886  00CC  0864               	movf	printf@cp+1,w
   887  00CD  00FF               	movwf	127
   888  00CE  0863               	movf	printf@cp,w
   889  00CF  0084               	movwf	4
   890  00D0  120A  118A  216A  120A  118A  	fcall	stringtab
   891  00D5  3A00               	xorlw	0
   892  00D6  1903               	btfsc	3,2
   893  00D7  2899               	goto	l1007
   894                           
   895                           ;doprnt.c: 778: (putch(*cp++) );
   896  00D8  0864               	movf	printf@cp+1,w
   897  00D9  00FF               	movwf	127
   898  00DA  0863               	movf	printf@cp,w
   899  00DB  0084               	movwf	4
   900  00DC  120A  118A  216A  120A  118A  	fcall	stringtab
   901  00E1  120A  118A  22AC  120A  118A  	fcall	_putch
   902  00E6  3001               	movlw	1
   903  00E7  1283               	bcf	3,5	;RP0=0, select bank0
   904  00E8  1303               	bcf	3,6	;RP1=0, select bank0
   905  00E9  07E3               	addwf	printf@cp,f
   906  00EA  1803               	skipnc
   907  00EB  0AE4               	incf	printf@cp+1,f
   908  00EC  28CC               	goto	l1001
   909  00ED                     l1005:	
   910                           ;doprnt.c: 822: }
   911                           
   912                           ;doprnt.c: 813: continue;
   913                           
   914                           ;doprnt.c: 802: default:
   915                           
   916                           ;doprnt.c: 779: continue;
   917                           
   918  00ED  3001               	movlw	1
   919  00EE  07E5               	addwf	printf@f,f
   920  00EF  30FF               	movlw	-1
   921  00F0  0765               	addwf	printf@f,w
   922  00F1  0084               	movwf	4
   923  00F2  120A  118A  2174  120A  118A  	fcall	stringdir
   924  00F7  00E2               	movwf	printf@c
   925                           
   926                           ; Switch size 1, requested type "space"
   927                           ; Number of cases is 2, Range of values is 0 to 115
   928                           ; switch strategies available:
   929                           ; Name         Instructions Cycles
   930                           ; simple_byte            7     4 (average)
   931                           ; jumptable            260     6 (fixed)
   932                           ;	Chosen strategy is simple_byte
   933  00F8  3A00               	xorlw	0	; case 0
   934  00F9  1903               	skipnz
   935  00FA  2900               	goto	l129
   936  00FB  3A73               	xorlw	115	; case 115
   937  00FC  1903               	skipnz
   938  00FD  28BA               	goto	l989
   939  00FE  2899               	goto	l1007
   940  00FF  2899               	goto	l1007
   941  0100                     l129:	
   942                           ;doprnt.c: 1540: return 0;
   943                           ;	Return value of _printf is never used
   944                           
   945                           ;doprnt.c: 1469: }
   946                           ;doprnt.c: 1533: }
   947                           ;doprnt.c: 1535: alldone:
   948                           
   949  0100  0008               	return
   950  0101                     __end_of_printf:	
   951                           
   952                           	psect	text4
   953  023D                     __ptext4:	
   954 ;; *************** function _is_numeric *****************
   955 ;; Defined at:
   956 ;;		line 64 in file "functions_uart.h"
   957 ;; Parameters:    Size  Location     Type
   958 ;;  str             1    wreg     PTR const unsigned char 
   959 ;;		 -> entrada(64), 
   960 ;; Auto vars:     Size  Location     Type
   961 ;;  str             1    2[BANK0 ] PTR const unsigned char 
   962 ;;		 -> entrada(64), 
   963 ;;  res             2    0[BANK0 ] int 
   964 ;; Return value:  Size  Location     Type
   965 ;;                  2    6[COMMON] int 
   966 ;; Registers used:
   967 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   968 ;; Tracked objects:
   969 ;;		On entry : 0/0
   970 ;;		On exit  : 0/0
   971 ;;		Unchanged: 0/0
   972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   973 ;;      Params:         2       0       0       0       0
   974 ;;      Locals:         0       3       0       0       0
   975 ;;      Temps:          1       0       0       0       0
   976 ;;      Totals:         3       3       0       0       0
   977 ;;Total ram usage:        6 bytes
   978 ;; Hardware stack levels used:    1
   979 ;; Hardware stack levels required when called:    2
   980 ;; This function calls:
   981 ;;		_isdigit
   982 ;; This function is called by:
   983 ;;		_manipula_entrada
   984 ;; This function uses a non-reentrant model
   985 ;;
   986                           
   987                           
   988                           ;psect for function _is_numeric
   989  023D                     _is_numeric:	
   990                           
   991                           ;incstack = 0
   992                           ; Regs used in _is_numeric: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   993                           ;is_numeric@str stored from wreg
   994  023D  1283               	bcf	3,5	;RP0=0, select bank0
   995  023E  1303               	bcf	3,6	;RP1=0, select bank0
   996  023F  00E2               	movwf	is_numeric@str
   997                           
   998                           ;functions_uart.h: 65: int res = 1;
   999  0240  3001               	movlw	1
  1000  0241  00E0               	movwf	is_numeric@res
  1001  0242  3000               	movlw	0
  1002  0243  00E1               	movwf	is_numeric@res+1
  1003                           
  1004                           ;functions_uart.h: 69: while(*str){
  1005  0244  2A4B               	goto	l941
  1006  0245                     l939:	
  1007                           ;functions_uart.h: 72: break;
  1008                           
  1009                           
  1010                           ;functions_uart.h: 73: }
  1011                           ;functions_uart.h: 75: str++;
  1012  0245  3001               	movlw	1
  1013  0246  00F8               	movwf	??_is_numeric
  1014  0247  0878               	movf	??_is_numeric,w
  1015  0248  1283               	bcf	3,5	;RP0=0, select bank0
  1016  0249  1303               	bcf	3,6	;RP1=0, select bank0
  1017  024A  07E2               	addwf	is_numeric@str,f
  1018  024B                     l941:	
  1019  024B  0862               	movf	is_numeric@str,w
  1020  024C  0084               	movwf	4
  1021  024D  1383               	bcf	3,7	;select IRP bank0
  1022  024E  0800               	movf	0,w
  1023  024F  1903               	btfsc	3,2
  1024  0250  2A60               	goto	l943
  1025                           
  1026                           ;functions_uart.h: 70: if(!isdigit(*str)){
  1027  0251  0862               	movf	is_numeric@str,w
  1028  0252  0084               	movwf	4
  1029  0253  1383               	bcf	3,7	;select IRP bank0
  1030  0254  0800               	movf	0,w
  1031  0255  120A  118A  22E5  120A  118A  	fcall	_isdigit
  1032  025A  1803               	btfsc	3,0
  1033  025B  2A45               	goto	l939
  1034                           
  1035                           ;functions_uart.h: 71: res = 0;
  1036  025C  1283               	bcf	3,5	;RP0=0, select bank0
  1037  025D  1303               	bcf	3,6	;RP1=0, select bank0
  1038  025E  01E0               	clrf	is_numeric@res
  1039  025F  01E1               	clrf	is_numeric@res+1
  1040  0260                     l943:	
  1041                           
  1042                           ;functions_uart.h: 76: }
  1043                           ;functions_uart.h: 78: return res;
  1044  0260  0861               	movf	is_numeric@res+1,w
  1045  0261  00F7               	movwf	?_is_numeric+1
  1046  0262  0860               	movf	is_numeric@res,w
  1047  0263  00F6               	movwf	?_is_numeric
  1048  0264  0008               	return
  1049  0265                     __end_of_is_numeric:	
  1050                           
  1051                           	psect	text5
  1052  0021                     __ptext5:	
  1053 ;; *************** function _atoi *****************
  1054 ;; Defined at:
  1055 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\atoi.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;  s               1    wreg     PTR const unsigned char 
  1058 ;;		 -> entrada(64), 
  1059 ;; Auto vars:     Size  Location     Type
  1060 ;;  s               1    9[BANK0 ] PTR const unsigned char 
  1061 ;;		 -> entrada(64), 
  1062 ;;  a               2    7[BANK0 ] int 
  1063 ;;  sign            1    6[BANK0 ] unsigned char 
  1064 ;; Return value:  Size  Location     Type
  1065 ;;                  2    2[BANK0 ] int 
  1066 ;; Registers used:
  1067 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1068 ;; Tracked objects:
  1069 ;;		On entry : 0/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1073 ;;      Params:         0       2       0       0       0
  1074 ;;      Locals:         0       4       0       0       0
  1075 ;;      Temps:          0       2       0       0       0
  1076 ;;      Totals:         0       8       0       0       0
  1077 ;;Total ram usage:        8 bytes
  1078 ;; Hardware stack levels used:    1
  1079 ;; Hardware stack levels required when called:    2
  1080 ;; This function calls:
  1081 ;;		___wmul
  1082 ;;		_isdigit
  1083 ;; This function is called by:
  1084 ;;		_manipula_entrada
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           
  1089                           ;psect for function _atoi
  1090  0021                     _atoi:	
  1091                           
  1092                           ;incstack = 0
  1093                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1094                           ;atoi@s stored from wreg
  1095  0021  1283               	bcf	3,5	;RP0=0, select bank0
  1096  0022  1303               	bcf	3,6	;RP1=0, select bank0
  1097  0023  00E9               	movwf	atoi@s
  1098  0024                     l1115:	
  1099  0024  0869               	movf	atoi@s,w
  1100  0025  0084               	movwf	4
  1101  0026  3020               	movlw	32
  1102  0027  1383               	bcf	3,7	;select IRP bank0
  1103  0028  0600               	xorwf	0,w
  1104  0029  1D03               	btfss	3,2
  1105  002A  2830               	goto	l1117
  1106  002B                     l1113:	
  1107  002B  3001               	movlw	1
  1108  002C  00E4               	movwf	??_atoi
  1109  002D  0864               	movf	??_atoi,w
  1110  002E  07E9               	addwf	atoi@s,f
  1111  002F  2824               	goto	l1115
  1112  0030                     l1117:	
  1113  0030  0869               	movf	atoi@s,w
  1114  0031  0084               	movwf	4
  1115  0032  3009               	movlw	9
  1116  0033  0600               	xorwf	0,w
  1117  0034  1903               	btfsc	3,2
  1118  0035  282B               	goto	l1113
  1119  0036  01E7               	clrf	atoi@a
  1120  0037  01E8               	clrf	atoi@a+1
  1121  0038  01E6               	clrf	atoi@sign
  1122  0039  0869               	movf	atoi@s,w
  1123  003A  0084               	movwf	4
  1124  003B  302D               	movlw	45
  1125  003C  0600               	xorwf	0,w
  1126  003D  1D03               	btfss	3,2
  1127  003E  2844               	goto	l1125
  1128  003F  3001               	movlw	1
  1129  0040  00E4               	movwf	??_atoi
  1130  0041  0864               	movf	??_atoi,w
  1131  0042  07E6               	addwf	atoi@sign,f
  1132  0043  284A               	goto	l1131
  1133  0044                     l1125:	
  1134  0044  0869               	movf	atoi@s,w
  1135  0045  0084               	movwf	4
  1136  0046  302B               	movlw	43
  1137  0047  0600               	xorwf	0,w
  1138  0048  1D03               	btfss	3,2
  1139  0049  284E               	goto	l1133
  1140  004A                     l1131:	
  1141  004A  3001               	movlw	1
  1142  004B  00E4               	movwf	??_atoi
  1143  004C  0864               	movf	??_atoi,w
  1144  004D  07E9               	addwf	atoi@s,f
  1145  004E                     l1133:	
  1146  004E  0869               	movf	atoi@s,w
  1147  004F  0084               	movwf	4
  1148  0050  0800               	movf	0,w
  1149  0051  120A  118A  22E5  120A  118A  	fcall	_isdigit
  1150  0056  1C03               	btfss	3,0
  1151  0057  287C               	goto	l1135
  1152  0058  1283               	bcf	3,5	;RP0=0, select bank0
  1153  0059  1303               	bcf	3,6	;RP1=0, select bank0
  1154  005A  0868               	movf	atoi@a+1,w
  1155  005B  00F5               	movwf	___wmul@multiplier+1
  1156  005C  0867               	movf	atoi@a,w
  1157  005D  00F4               	movwf	___wmul@multiplier
  1158  005E  300A               	movlw	10
  1159  005F  00F6               	movwf	___wmul@multiplicand
  1160  0060  3000               	movlw	0
  1161  0061  00F7               	movwf	___wmul@multiplicand+1
  1162  0062  120A  118A  2265  120A  118A  	fcall	___wmul
  1163  0067  1283               	bcf	3,5	;RP0=0, select bank0
  1164  0068  1303               	bcf	3,6	;RP1=0, select bank0
  1165  0069  0869               	movf	atoi@s,w
  1166  006A  0084               	movwf	4
  1167  006B  1383               	bcf	3,7	;select IRP bank0
  1168  006C  0800               	movf	0,w
  1169  006D  0774               	addwf	?___wmul,w
  1170  006E  00E4               	movwf	??_atoi
  1171  006F  0875               	movf	?___wmul+1,w
  1172  0070  1803               	skipnc
  1173  0071  0A75               	incf	?___wmul+1,w
  1174  0072  00E5               	movwf	??_atoi+1
  1175  0073  0864               	movf	??_atoi,w
  1176  0074  3ED0               	addlw	208
  1177  0075  00E7               	movwf	atoi@a
  1178  0076  0865               	movf	??_atoi+1,w
  1179  0077  1803               	skipnc
  1180  0078  3E01               	addlw	1
  1181  0079  3EFF               	addlw	255
  1182  007A  00E8               	movwf	atoi@a+1
  1183  007B  284A               	goto	l1131
  1184  007C                     l1135:	
  1185  007C  1283               	bcf	3,5	;RP0=0, select bank0
  1186  007D  1303               	bcf	3,6	;RP1=0, select bank0
  1187  007E  0866               	movf	atoi@sign,w
  1188  007F  1903               	btfsc	3,2
  1189  0080  288D               	goto	l1141
  1190  0081  0967               	comf	atoi@a,w
  1191  0082  00E4               	movwf	??_atoi
  1192  0083  0968               	comf	atoi@a+1,w
  1193  0084  00E5               	movwf	??_atoi+1
  1194  0085  0AE4               	incf	??_atoi,f
  1195  0086  1903               	skipnz
  1196  0087  0AE5               	incf	??_atoi+1,f
  1197  0088  0864               	movf	??_atoi,w
  1198  0089  00E2               	movwf	?_atoi
  1199  008A  0865               	movf	??_atoi+1,w
  1200  008B  00E3               	movwf	?_atoi+1
  1201  008C  0008               	return
  1202  008D                     l1141:	
  1203  008D  0868               	movf	atoi@a+1,w
  1204  008E  00E3               	movwf	?_atoi+1
  1205  008F  0867               	movf	atoi@a,w
  1206  0090  00E2               	movwf	?_atoi
  1207  0091  0008               	return
  1208  0092                     __end_of_atoi:	
  1209                           
  1210                           	psect	text6
  1211  02E5                     __ptext6:	
  1212 ;; *************** function _isdigit *****************
  1213 ;; Defined at:
  1214 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\isdigit.c"
  1215 ;; Parameters:    Size  Location     Type
  1216 ;;  c               1    wreg     unsigned char 
  1217 ;; Auto vars:     Size  Location     Type
  1218 ;;  c               1    5[COMMON] unsigned char 
  1219 ;; Return value:  Size  Location     Type
  1220 ;;		None               void
  1221 ;; Registers used:
  1222 ;;		wreg, status,2, status,0
  1223 ;; Tracked objects:
  1224 ;;		On entry : 0/0
  1225 ;;		On exit  : 0/0
  1226 ;;		Unchanged: 0/0
  1227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1228 ;;      Params:         0       0       0       0       0
  1229 ;;      Locals:         2       0       0       0       0
  1230 ;;      Temps:          0       0       0       0       0
  1231 ;;      Totals:         2       0       0       0       0
  1232 ;;Total ram usage:        2 bytes
  1233 ;; Hardware stack levels used:    1
  1234 ;; Hardware stack levels required when called:    1
  1235 ;; This function calls:
  1236 ;;		Nothing
  1237 ;; This function is called by:
  1238 ;;		_is_numeric
  1239 ;;		_atoi
  1240 ;; This function uses a non-reentrant model
  1241 ;;
  1242                           
  1243                           
  1244                           ;psect for function _isdigit
  1245  02E5                     _isdigit:	
  1246                           
  1247                           ;incstack = 0
  1248                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1249                           ;isdigit@c stored from wreg
  1250  02E5  00F5               	movwf	isdigit@c
  1251  02E6  01F4               	clrf	_isdigit$367
  1252  02E7  303A               	movlw	58
  1253  02E8  0275               	subwf	isdigit@c,w
  1254  02E9  1803               	skipnc
  1255  02EA  2AF1               	goto	l899
  1256  02EB  3030               	movlw	48
  1257  02EC  0275               	subwf	isdigit@c,w
  1258  02ED  1C03               	skipc
  1259  02EE  2AF1               	goto	l899
  1260  02EF  01F4               	clrf	_isdigit$367
  1261  02F0  0AF4               	incf	_isdigit$367,f
  1262  02F1                     l899:	
  1263  02F1  0C74               	rrf	_isdigit$367,w
  1264  02F2  0008               	return
  1265  02F3                     __end_of_isdigit:	
  1266                           
  1267                           	psect	text7
  1268  0265                     __ptext7:	
  1269 ;; *************** function ___wmul *****************
  1270 ;; Defined at:
  1271 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\Umul16.c"
  1272 ;; Parameters:    Size  Location     Type
  1273 ;;  multiplier      2    4[COMMON] unsigned int 
  1274 ;;  multiplicand    2    6[COMMON] unsigned int 
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;  product         2    0[BANK0 ] unsigned int 
  1277 ;; Return value:  Size  Location     Type
  1278 ;;                  2    4[COMMON] unsigned int 
  1279 ;; Registers used:
  1280 ;;		wreg, status,2, status,0
  1281 ;; Tracked objects:
  1282 ;;		On entry : 0/0
  1283 ;;		On exit  : 0/0
  1284 ;;		Unchanged: 0/0
  1285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1286 ;;      Params:         4       0       0       0       0
  1287 ;;      Locals:         0       2       0       0       0
  1288 ;;      Temps:          0       0       0       0       0
  1289 ;;      Totals:         4       2       0       0       0
  1290 ;;Total ram usage:        6 bytes
  1291 ;; Hardware stack levels used:    1
  1292 ;; Hardware stack levels required when called:    1
  1293 ;; This function calls:
  1294 ;;		Nothing
  1295 ;; This function is called by:
  1296 ;;		_atoi
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           
  1301                           ;psect for function ___wmul
  1302  0265                     ___wmul:	
  1303                           
  1304                           ;incstack = 0
  1305                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1306  0265  1283               	bcf	3,5	;RP0=0, select bank0
  1307  0266  1303               	bcf	3,6	;RP1=0, select bank0
  1308  0267  01E0               	clrf	___wmul@product
  1309  0268  01E1               	clrf	___wmul@product+1
  1310  0269                     l1099:	
  1311  0269  1C74               	btfss	___wmul@multiplier,0
  1312  026A  2A73               	goto	l213
  1313  026B  0876               	movf	___wmul@multiplicand,w
  1314  026C  1283               	bcf	3,5	;RP0=0, select bank0
  1315  026D  1303               	bcf	3,6	;RP1=0, select bank0
  1316  026E  07E0               	addwf	___wmul@product,f
  1317  026F  1803               	skipnc
  1318  0270  0AE1               	incf	___wmul@product+1,f
  1319  0271  0877               	movf	___wmul@multiplicand+1,w
  1320  0272  07E1               	addwf	___wmul@product+1,f
  1321  0273                     l213:	
  1322  0273  3001               	movlw	1
  1323  0274                     u555:	
  1324  0274  1003               	clrc
  1325  0275  0DF6               	rlf	___wmul@multiplicand,f
  1326  0276  0DF7               	rlf	___wmul@multiplicand+1,f
  1327  0277  3EFF               	addlw	-1
  1328  0278  1D03               	skipz
  1329  0279  2A74               	goto	u555
  1330  027A  3001               	movlw	1
  1331  027B                     u565:	
  1332  027B  1003               	clrc
  1333  027C  0CF5               	rrf	___wmul@multiplier+1,f
  1334  027D  0CF4               	rrf	___wmul@multiplier,f
  1335  027E  3EFF               	addlw	-1
  1336  027F  1D03               	skipz
  1337  0280  2A7B               	goto	u565
  1338  0281  0874               	movf	___wmul@multiplier,w
  1339  0282  0475               	iorwf	___wmul@multiplier+1,w
  1340  0283  1D03               	btfss	3,2
  1341  0284  2A69               	goto	l1099
  1342  0285  1283               	bcf	3,5	;RP0=0, select bank0
  1343  0286  1303               	bcf	3,6	;RP1=0, select bank0
  1344  0287  0861               	movf	___wmul@product+1,w
  1345  0288  00F5               	movwf	?___wmul+1
  1346  0289  0860               	movf	___wmul@product,w
  1347  028A  00F4               	movwf	?___wmul
  1348  028B  0008               	return
  1349  028C                     __end_of___wmul:	
  1350                           
  1351                           	psect	text8
  1352  0101                     __ptext8:	
  1353 ;; *************** function _cgets *****************
  1354 ;; Defined at:
  1355 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\cgets.c"
  1356 ;; Parameters:    Size  Location     Type
  1357 ;;  s               1    wreg     PTR unsigned char 
  1358 ;;		 -> entrada(64), 
  1359 ;; Auto vars:     Size  Location     Type
  1360 ;;  s               1    2[BANK0 ] PTR unsigned char 
  1361 ;;		 -> entrada(64), 
  1362 ;;  c               2    0[BANK0 ] int 
  1363 ;;  s1              1    3[BANK0 ] PTR unsigned char 
  1364 ;;		 -> entrada(64), 
  1365 ;; Return value:  Size  Location     Type
  1366 ;;                  1    wreg      PTR unsigned char 
  1367 ;; Registers used:
  1368 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1369 ;; Tracked objects:
  1370 ;;		On entry : 0/0
  1371 ;;		On exit  : 0/0
  1372 ;;		Unchanged: 0/0
  1373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1374 ;;      Params:         0       0       0       0       0
  1375 ;;      Locals:         0       4       0       0       0
  1376 ;;      Temps:          2       0       0       0       0
  1377 ;;      Totals:         2       4       0       0       0
  1378 ;;Total ram usage:        6 bytes
  1379 ;; Hardware stack levels used:    1
  1380 ;; Hardware stack levels required when called:    3
  1381 ;; This function calls:
  1382 ;;		_getche
  1383 ;;		_putch
  1384 ;; This function is called by:
  1385 ;;		_main
  1386 ;; This function uses a non-reentrant model
  1387 ;;
  1388                           
  1389                           
  1390                           ;psect for function _cgets
  1391  0101                     _cgets:	
  1392                           
  1393                           ;incstack = 0
  1394                           ; Regs used in _cgets: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1395                           ;cgets@s stored from wreg
  1396  0101  1283               	bcf	3,5	;RP0=0, select bank0
  1397  0102  1303               	bcf	3,6	;RP1=0, select bank0
  1398  0103  00E2               	movwf	cgets@s
  1399  0104  0862               	movf	cgets@s,w
  1400  0105  00F6               	movwf	??_cgets
  1401  0106  0876               	movf	??_cgets,w
  1402  0107  00E3               	movwf	cgets@s1
  1403  0108  2949               	goto	l1043
  1404  0109                     l1019:	
  1405  0109  0862               	movf	cgets@s,w
  1406  010A  0663               	xorwf	cgets@s1,w
  1407  010B  1903               	btfsc	3,2
  1408  010C  2949               	goto	l1043
  1409  010D  3020               	movlw	32
  1410  010E  120A  118A  22AC  120A  118A  	fcall	_putch
  1411  0113  3008               	movlw	8
  1412  0114  120A  118A  22AC  120A  118A  	fcall	_putch
  1413  0119  3001               	movlw	1
  1414  011A  1283               	bcf	3,5	;RP0=0, select bank0
  1415  011B  1303               	bcf	3,6	;RP1=0, select bank0
  1416  011C  02E3               	subwf	cgets@s1,f
  1417  011D  2949               	goto	l1043
  1418  011E                     l1027:	
  1419  011E  3008               	movlw	8
  1420  011F  120A  118A  22AC  120A  118A  	fcall	_putch
  1421  0124  3020               	movlw	32
  1422  0125  120A  118A  22AC  120A  118A  	fcall	_putch
  1423  012A  3008               	movlw	8
  1424  012B  120A  118A  22AC  120A  118A  	fcall	_putch
  1425  0130  3001               	movlw	1
  1426  0131  1283               	bcf	3,5	;RP0=0, select bank0
  1427  0132  1303               	bcf	3,6	;RP1=0, select bank0
  1428  0133  02E3               	subwf	cgets@s1,f
  1429  0134                     l1031:	
  1430  0134  0863               	movf	cgets@s1,w
  1431  0135  0262               	subwf	cgets@s,w
  1432  0136  1803               	btfsc	3,0
  1433  0137  2949               	goto	l1043
  1434  0138  291E               	goto	l1027
  1435  0139                     l1033:	
  1436  0139  0863               	movf	cgets@s1,w
  1437  013A  0084               	movwf	4
  1438  013B  1383               	bcf	3,7	;select IRP bank0
  1439  013C  0180               	clrf	0
  1440                           
  1441                           ;	Return value of _cgets is never used
  1442  013D  0008               	return
  1443  013E                     l1037:	
  1444  013E  0860               	movf	cgets@c,w
  1445  013F  00F6               	movwf	??_cgets
  1446  0140  0863               	movf	cgets@s1,w
  1447  0141  0084               	movwf	4
  1448  0142  0876               	movf	??_cgets,w
  1449  0143  1383               	bcf	3,7	;select IRP bank0
  1450  0144  0080               	movwf	0
  1451  0145  3001               	movlw	1
  1452  0146  00F6               	movwf	??_cgets
  1453  0147  0876               	movf	??_cgets,w
  1454  0148  07E3               	addwf	cgets@s1,f
  1455  0149                     l1043:	
  1456  0149  120A  118A  22F3  120A  118A  	fcall	_getche
  1457  014E  00F6               	movwf	??_cgets
  1458  014F  01F7               	clrf	??_cgets+1
  1459  0150  0876               	movf	??_cgets,w
  1460  0151  1283               	bcf	3,5	;RP0=0, select bank0
  1461  0152  1303               	bcf	3,6	;RP1=0, select bank0
  1462  0153  00E0               	movwf	cgets@c
  1463  0154  0877               	movf	??_cgets+1,w
  1464  0155  00E1               	movwf	cgets@c+1
  1465                           
  1466                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1467                           ; Switch size 1, requested type "space"
  1468                           ; Number of cases is 1, Range of values is 0 to 0
  1469                           ; switch strategies available:
  1470                           ; Name         Instructions Cycles
  1471                           ; simple_byte            4     3 (average)
  1472                           ; direct_byte           11     8 (fixed)
  1473                           ; jumptable            260     6 (fixed)
  1474                           ;	Chosen strategy is simple_byte
  1475  0156  0861               	movf	cgets@c+1,w
  1476  0157  3A00               	xorlw	0	; case 0
  1477  0158  1903               	skipnz
  1478  0159  295B               	goto	l1201
  1479  015A  293E               	goto	l1037
  1480  015B                     l1201:	
  1481                           
  1482                           ; Switch size 1, requested type "space"
  1483                           ; Number of cases is 4, Range of values is 8 to 21
  1484                           ; switch strategies available:
  1485                           ; Name         Instructions Cycles
  1486                           ; simple_byte           13     7 (average)
  1487                           ; direct_byte           53    11 (fixed)
  1488                           ; jumptable            263     9 (fixed)
  1489                           ;	Chosen strategy is simple_byte
  1490  015B  0860               	movf	cgets@c,w
  1491  015C  3A08               	xorlw	8	; case 8
  1492  015D  1903               	skipnz
  1493  015E  2909               	goto	l1019
  1494  015F  3A02               	xorlw	2	; case 10
  1495  0160  1903               	skipnz
  1496  0161  2939               	goto	l1033
  1497  0162  3A07               	xorlw	7	; case 13
  1498  0163  1903               	skipnz
  1499  0164  2939               	goto	l1033
  1500  0165  3A18               	xorlw	24	; case 21
  1501  0166  1903               	skipnz
  1502  0167  2934               	goto	l1031
  1503  0168  293E               	goto	l1037
  1504  0169  2949               	goto	l1043
  1505  016A                     __end_of_cgets:	
  1506                           
  1507                           	psect	text9
  1508  02F3                     __ptext9:	
  1509 ;; *************** function _getche *****************
  1510 ;; Defined at:
  1511 ;;		line 34 in file "functions_uart.h"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;		None
  1514 ;; Auto vars:     Size  Location     Type
  1515 ;;  c               1    5[COMMON] unsigned char 
  1516 ;; Return value:  Size  Location     Type
  1517 ;;                  1    wreg      unsigned char 
  1518 ;; Registers used:
  1519 ;;		wreg, status,2, status,0, pclath, cstack
  1520 ;; Tracked objects:
  1521 ;;		On entry : 0/0
  1522 ;;		On exit  : 0/0
  1523 ;;		Unchanged: 0/0
  1524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1525 ;;      Params:         0       0       0       0       0
  1526 ;;      Locals:         1       0       0       0       0
  1527 ;;      Temps:          0       0       0       0       0
  1528 ;;      Totals:         1       0       0       0       0
  1529 ;;Total ram usage:        1 bytes
  1530 ;; Hardware stack levels used:    1
  1531 ;; Hardware stack levels required when called:    2
  1532 ;; This function calls:
  1533 ;;		_getch
  1534 ;;		_putch
  1535 ;; This function is called by:
  1536 ;;		_cgets
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540                           
  1541                           ;psect for function _getche
  1542  02F3                     _getche:	
  1543                           
  1544                           ;functions_uart.h: 35: unsigned char c;
  1545                           ;functions_uart.h: 36: putch(c = getch());
  1546                           
  1547                           ;incstack = 0
  1548                           ; Regs used in _getche: [wreg+status,2+status,0+pclath+cstack]
  1549  02F3  120A  118A  22FE  120A  118A  	fcall	_getch
  1550  02F8  00F5               	movwf	getche@c
  1551  02F9  120A  118A  22AC   	fcall	_putch
  1552                           
  1553                           ;functions_uart.h: 37: return c;
  1554  02FC  0875               	movf	getche@c,w
  1555  02FD  0008               	return
  1556  02FE                     __end_of_getche:	
  1557                           
  1558                           	psect	text10
  1559  02AC                     __ptext10:	
  1560 ;; *************** function _putch *****************
  1561 ;; Defined at:
  1562 ;;		line 40 in file "functions_uart.h"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;  byte            1    wreg     unsigned char 
  1565 ;; Auto vars:     Size  Location     Type
  1566 ;;  byte            1    4[COMMON] unsigned char 
  1567 ;; Return value:  Size  Location     Type
  1568 ;;                  1    wreg      void 
  1569 ;; Registers used:
  1570 ;;		wreg, status,2, status,0
  1571 ;; Tracked objects:
  1572 ;;		On entry : 0/0
  1573 ;;		On exit  : 0/0
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1576 ;;      Params:         0       0       0       0       0
  1577 ;;      Locals:         1       0       0       0       0
  1578 ;;      Temps:          0       0       0       0       0
  1579 ;;      Totals:         1       0       0       0       0
  1580 ;;Total ram usage:        1 bytes
  1581 ;; Hardware stack levels used:    1
  1582 ;; Hardware stack levels required when called:    1
  1583 ;; This function calls:
  1584 ;;		Nothing
  1585 ;; This function is called by:
  1586 ;;		_getche
  1587 ;;		_printf
  1588 ;;		_cgets
  1589 ;; This function uses a non-reentrant model
  1590 ;;
  1591                           
  1592                           
  1593                           ;psect for function _putch
  1594  02AC                     _putch:	
  1595                           
  1596                           ;incstack = 0
  1597                           ; Regs used in _putch: [wreg+status,2+status,0]
  1598                           ;putch@byte stored from wreg
  1599  02AC  00F4               	movwf	putch@byte
  1600  02AD                     l71:	
  1601                           ;functions_uart.h: 41: while (!TXSTAbits.TRMT);
  1602                           
  1603  02AD  1683               	bsf	3,5	;RP0=1, select bank1
  1604  02AE  1303               	bcf	3,6	;RP1=0, select bank1
  1605  02AF  1C98               	btfss	24,1	;volatile
  1606  02B0  2AAD               	goto	l71
  1607                           
  1608                           ;functions_uart.h: 42: TXREG = byte;
  1609  02B1  0874               	movf	putch@byte,w
  1610  02B2  1283               	bcf	3,5	;RP0=0, select bank0
  1611  02B3  1303               	bcf	3,6	;RP1=0, select bank0
  1612  02B4  0099               	movwf	25	;volatile
  1613                           
  1614                           ;functions_uart.h: 43: if ('\n' == byte) {
  1615  02B5  300A               	movlw	10
  1616  02B6  0674               	xorwf	putch@byte,w
  1617  02B7  1D03               	btfss	3,2
  1618  02B8  0008               	return
  1619  02B9                     l75:	
  1620                           ;functions_uart.h: 44: while (!TXSTAbits.TRMT);
  1621                           
  1622  02B9  1683               	bsf	3,5	;RP0=1, select bank1
  1623  02BA  1303               	bcf	3,6	;RP1=0, select bank1
  1624  02BB  1C98               	btfss	24,1	;volatile
  1625  02BC  2AB9               	goto	l75
  1626                           
  1627                           ;functions_uart.h: 45: TXREG = '\r';
  1628  02BD  300D               	movlw	13
  1629  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  1630  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  1631  02C0  0099               	movwf	25	;volatile
  1632  02C1  0008               	return
  1633  02C2                     __end_of_putch:	
  1634                           ;functions_uart.h: 46: }
  1635                           ;functions_uart.h: 47: return;
  1636                           
  1637                           
  1638                           	psect	text11
  1639  02FE                     __ptext11:	
  1640 ;; *************** function _getch *****************
  1641 ;; Defined at:
  1642 ;;		line 27 in file "functions_uart.h"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;		None
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;		None
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  1    wreg      unsigned char 
  1649 ;; Registers used:
  1650 ;;		wreg, status,2, status,0
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1656 ;;      Params:         0       0       0       0       0
  1657 ;;      Locals:         0       0       0       0       0
  1658 ;;      Temps:          0       0       0       0       0
  1659 ;;      Totals:         0       0       0       0       0
  1660 ;;Total ram usage:        0 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; Hardware stack levels required when called:    1
  1663 ;; This function calls:
  1664 ;;		Nothing
  1665 ;; This function is called by:
  1666 ;;		_getche
  1667 ;; This function uses a non-reentrant model
  1668 ;;
  1669                           
  1670                           
  1671                           ;psect for function _getch
  1672  02FE                     _getch:	
  1673                           
  1674                           ;functions_uart.h: 28: getchar_active = 1;
  1675                           
  1676                           ;incstack = 0
  1677                           ; Regs used in _getch: [wreg+status,2+status,0]
  1678  02FE  01F9               	clrf	_getchar_active
  1679  02FF  0AF9               	incf	_getchar_active,f
  1680  0300                     l873:	
  1681                           ;functions_uart.h: 30: continue;
  1682                           
  1683                           ;functions_uart.h: 29: while(getchar_active)
  1684                           
  1685  0300  0879               	movf	_getchar_active,w
  1686  0301  1D03               	btfss	3,2
  1687  0302  2B00               	goto	l873
  1688                           
  1689                           ;functions_uart.h: 31: return RCREG;
  1690  0303  1283               	bcf	3,5	;RP0=0, select bank0
  1691  0304  1303               	bcf	3,6	;RP1=0, select bank0
  1692  0305  081A               	movf	26,w	;volatile
  1693  0306  0008               	return
  1694  0307                     __end_of_getch:	
  1695                           
  1696                           	psect	text12
  1697  02C2                     __ptext12:	
  1698 ;; *************** function _UART_init *****************
  1699 ;; Defined at:
  1700 ;;		line 14 in file "functions_uart.h"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;		None
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;		None
  1705 ;; Return value:  Size  Location     Type
  1706 ;;                  1    wreg      void 
  1707 ;; Registers used:
  1708 ;;		wreg
  1709 ;; Tracked objects:
  1710 ;;		On entry : 0/0
  1711 ;;		On exit  : 0/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1714 ;;      Params:         0       0       0       0       0
  1715 ;;      Locals:         0       0       0       0       0
  1716 ;;      Temps:          0       0       0       0       0
  1717 ;;      Totals:         0       0       0       0       0
  1718 ;;Total ram usage:        0 bytes
  1719 ;; Hardware stack levels used:    1
  1720 ;; Hardware stack levels required when called:    1
  1721 ;; This function calls:
  1722 ;;		Nothing
  1723 ;; This function is called by:
  1724 ;;		_main
  1725 ;; This function uses a non-reentrant model
  1726 ;;
  1727                           
  1728                           
  1729                           ;psect for function _UART_init
  1730  02C2                     _UART_init:	
  1731                           
  1732                           ;functions_uart.h: 15: BRGH = 1;
  1733                           
  1734                           ;incstack = 0
  1735                           ; Regs used in _UART_init: [wreg]
  1736  02C2  1683               	bsf	3,5	;RP0=1, select bank1
  1737  02C3  1303               	bcf	3,6	;RP1=0, select bank1
  1738  02C4  1518               	bsf	24,2	;volatile
  1739                           
  1740                           ;functions_uart.h: 16: SYNC = 0;
  1741  02C5  1218               	bcf	24,4	;volatile
  1742                           
  1743                           ;functions_uart.h: 17: TX9 = 0;
  1744  02C6  1318               	bcf	24,6	;volatile
  1745                           
  1746                           ;functions_uart.h: 18: CREN = 1;
  1747  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  1748  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  1749  02C9  1618               	bsf	24,4	;volatile
  1750                           
  1751                           ;functions_uart.h: 19: SPBRG = 129;
  1752  02CA  3081               	movlw	129
  1753  02CB  1683               	bsf	3,5	;RP0=1, select bank1
  1754  02CC  1303               	bcf	3,6	;RP1=0, select bank1
  1755  02CD  0099               	movwf	25	;volatile
  1756                           
  1757                           ;functions_uart.h: 20: RCIE = 1;
  1758  02CE  168C               	bsf	12,5	;volatile
  1759                           
  1760                           ;functions_uart.h: 21: SPEN = 1;
  1761  02CF  1283               	bcf	3,5	;RP0=0, select bank0
  1762  02D0  1303               	bcf	3,6	;RP1=0, select bank0
  1763  02D1  1798               	bsf	24,7	;volatile
  1764                           
  1765                           ;functions_uart.h: 22: TXEN = 1;
  1766  02D2  1683               	bsf	3,5	;RP0=1, select bank1
  1767  02D3  1303               	bcf	3,6	;RP1=0, select bank1
  1768  02D4  1698               	bsf	24,5	;volatile
  1769  02D5  0008               	return
  1770  02D6                     __end_of_UART_init:	
  1771                           
  1772                           	psect	text13
  1773  02D6                     __ptext13:	
  1774 ;; *************** function _interrupcao *****************
  1775 ;; Defined at:
  1776 ;;		line 5 in file "uart.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;		None
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;		None
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  1    wreg      void 
  1783 ;; Registers used:
  1784 ;;		wreg, status,2
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1790 ;;      Params:         0       0       0       0       0
  1791 ;;      Locals:         0       0       0       0       0
  1792 ;;      Temps:          4       0       0       0       0
  1793 ;;      Totals:         4       0       0       0       0
  1794 ;;Total ram usage:        4 bytes
  1795 ;; Hardware stack levels used:    1
  1796 ;; This function calls:
  1797 ;;		Nothing
  1798 ;; This function is called by:
  1799 ;;		Interrupt level 1
  1800 ;; This function uses a non-reentrant model
  1801 ;;
  1802                           
  1803                           
  1804                           ;psect for function _interrupcao
  1805  02D6                     _interrupcao:	
  1806                           
  1807                           ;uart.c: 9: if (RCIF){
  1808  02D6  1E8C               	btfss	12,5	;volatile
  1809  02D7  2ADA               	goto	i1l100
  1810                           
  1811                           ;uart.c: 10: getchar_active = 0;
  1812  02D8  01F9               	clrf	_getchar_active
  1813                           
  1814                           ;uart.c: 11: RCREG;
  1815  02D9  081A               	movf	26,w	;volatile
  1816  02DA                     i1l100:	
  1817  02DA  0873               	movf	??_interrupcao+3,w
  1818  02DB  00FF               	movwf	127
  1819  02DC  0872               	movf	??_interrupcao+2,w
  1820  02DD  008A               	movwf	10
  1821  02DE  0871               	movf	??_interrupcao+1,w
  1822  02DF  0084               	movwf	4
  1823  02E0  0E70               	swapf	??_interrupcao^(0+-128),w
  1824  02E1  0083               	movwf	3
  1825  02E2  0EFE               	swapf	126,f
  1826  02E3  0E7E               	swapf	126,w
  1827  02E4  0009               	retfie
  1828  02E5                     __end_of_interrupcao:	
  1829  007E                     btemp	set	126	;btemp
  1830  007E                     wtemp	set	126
  1831  007E                     wtemp0	set	126
  1832  0080                     wtemp1	set	128
  1833  0082                     wtemp2	set	130
  1834  0084                     wtemp3	set	132
  1835  0086                     wtemp4	set	134
  1836  0088                     wtemp5	set	136
  1837  007F                     wtemp6	set	127
  1838  007E                     ttemp	set	126
  1839  007E                     ttemp0	set	126
  1840  0081                     ttemp1	set	129
  1841  0084                     ttemp2	set	132
  1842  0087                     ttemp3	set	135
  1843  007F                     ttemp4	set	127
  1844  007E                     ltemp	set	126
  1845  007E                     ltemp0	set	126
  1846  0082                     ltemp1	set	130
  1847  0086                     ltemp2	set	134
  1848  0080                     ltemp3	set	128
  1849                           
  1850                           	psect	intentry
  1851  0004                     __pintentry:	
  1852                           ;incstack = 0
  1853                           ; Regs used in _interrupcao: [wreg+status,2]
  1854                           
  1855  0004                     interrupt_function:	
  1856  007E                     saved_w	set	btemp
  1857  0004  00FE               	movwf	btemp
  1858  0005  0E03               	swapf	3,w
  1859  0006  00F0               	movwf	??_interrupcao
  1860  0007  0804               	movf	4,w
  1861  0008  00F1               	movwf	??_interrupcao+1
  1862  0009  080A               	movf	10,w
  1863  000A  00F2               	movwf	??_interrupcao+2
  1864  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1865  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1866  000D  087F               	movf	btemp+1,w
  1867  000E  00F3               	movwf	??_interrupcao+3
  1868  000F  120A  118A  2AD6   	ljmp	_interrupcao


Data Sizes:
    Strings     88
    Constant    0
    Data        0
    BSS         65
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      10
    BANK0            80     13      77
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    cgets@s	PTR unsigned char  size(1) Largest target is 64
		 -> entrada(BANK0[64]), 

    cgets@s1	PTR unsigned char  size(1) Largest target is 64
		 -> entrada(BANK0[64]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 64
		 -> entrada(BANK0[64]), 

    printf@f	PTR const unsigned char  size(1) Largest target is 26
		 -> STR_5(CODE[4]), STR_4(CODE[26]), STR_3(CODE[19]), STR_2(CODE[24]), 
		 -> STR_1(CODE[8]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 64
		 -> STR_6(CODE[7]), entrada(BANK0[64]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(COMMON[2]), 

    sp__cgets	PTR unsigned char  size(1) Largest target is 64
		 -> entrada(BANK0[64]), 

    is_numeric@str	PTR const unsigned char  size(1) Largest target is 64
		 -> entrada(BANK0[64]), 


Critical Paths under _main in COMMON

    _manipula_entrada->_is_numeric
    _manipula_entrada->_pulse
    _printf->_putch
    _is_numeric->_isdigit
    _atoi->___wmul
    _cgets->_getche
    _getche->_putch

Critical Paths under _interrupcao in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_manipula_entrada
    _manipula_entrada->_atoi
    _atoi->___wmul

Critical Paths under _interrupcao in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interrupcao in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interrupcao in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interrupcao in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1993
                                             12 BANK0      1     1      0
                          _UART_init
                              _cgets
                   _manipula_entrada
                             _printf
 ---------------------------------------------------------------------------------
 (1) _manipula_entrada                                     2     2      0    1305
                                             10 BANK0      2     2      0
                               _atoi
                         _is_numeric
                             _printf
                              _pulse
 ---------------------------------------------------------------------------------
 (2) _pulse                                                5     5      0      46
                                              4 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) _printf                                              17    16      1     363
                                              5 COMMON     2     1      1
                                              0 BANK0      6     6      0
                              _putch
 ---------------------------------------------------------------------------------
 (2) _is_numeric                                           6     4      2     164
                                              6 COMMON     3     1      2
                                              0 BANK0      3     3      0
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2     698
                                              2 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     266
                                              4 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _cgets                                                6     6      0     325
                                              6 COMMON     2     2      0
                                              0 BANK0      4     4      0
                             _getche
                              _putch
 ---------------------------------------------------------------------------------
 (2) _getche                                               1     1      0      67
                                              5 COMMON     1     1      0
                              _getch
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getch                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _interrupcao                                          4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_init
   _cgets
     _getche
       _getch
       _putch
     _putch
   _manipula_entrada
     _atoi
       ___wmul
       _isdigit
     _is_numeric
       _isdigit
     _printf
       _putch
     _pulse
   _printf
     _putch

 _interrupcao (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      9       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      57       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      D      4D       5       96.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      57      12        0.0%


Microchip Technology PIC Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Tue Apr 26 15:39:10 2016

                        pc 0002                __CFG_CP$OFF 0000                         l71 02AD  
                       l75 02B9                         fsr 0004        ___wmul@multiplicand 0076  
                      l213 0273                        l129 0100                        l931 0214  
                      l941 024B                        l943 0260                        l873 0300  
                      l939 0245                        l899 02F1                        l987 00B6  
                      _GIE 005F                        l989 00BA                        _RC0 0038  
             __CFG_CPD$OFF 0000                        u555 0274                        u565 027B  
                      u657 0221                        u667 0231                        _TX9 04C6  
                      fsr0 0004                        indf 0000               __CFG_FOSC$HS 0000  
             __CFG_LVP$OFF 0000                       l1001 00CC                       l1005 00ED  
                     l1031 0134                       l1007 0099                       l1201 015B  
                     l1033 0139                       l1113 002B                       l1027 011E  
                     l1019 0109                       l1043 0149                       l1131 004A  
                     l1115 0024                       l1037 013E                       l1141 008D  
                     l1133 004E                       l1125 0044                       l1117 0030  
                     l1135 007C                       l1151 02A7                       l1171 01EE  
                     l1099 0269                       STR_1 01BF                       STR_2 0194  
                     STR_3 01AC                       STR_4 017A                       STR_5 01CE  
                     STR_6 01C7                       _BRGH 04C2                       _CREN 00C4  
                     _PEIE 005E                       _RCIE 0465                       _RCIF 0065  
                     _SPEN 00C7                       _TXEN 04C5                       _SYNC 04C4  
             __CFG_WRT$OFF 0000                       _atoi 0021                       _main 01D2  
                     btemp 007E                       ltemp 007E                       start 0012  
                     ttemp 007E                       wtemp 007E                      ?_atoi 0062  
                    ?_main 0070              __CFG_WDTE$OFF 0000                      _CMCON 009C  
                    i1l100 02DA                      _RCREG 001A                      _SPBRG 0099  
                    _PORTC 0007                      _TXREG 0019                      _cgets 0101  
       __size_of_UART_init 0014                      _getch 02FE            __end_of_isdigit 02F3  
                    atoi@a 0067                      atoi@s 0069                      _pulse 0212  
                    _putch 02AC             __CFG_BOREN$OFF 0000                      pclath 000A  
                    ltemp0 007E                      ltemp1 0082                      ltemp2 0086  
                    ltemp3 0080                      ttemp0 007E                      ttemp1 0081  
                    ttemp2 0084                      ttemp3 0087                      ttemp4 007F  
                    status 0003                      wtemp0 007E                      wtemp1 0080  
                    wtemp2 0082                      wtemp3 0084                      wtemp4 0086  
                    wtemp5 0088                      wtemp6 007F            __initialization 0015  
             ?_interrupcao 0070               __end_of_atoi 0092               __end_of_main 0212  
                   ??_atoi 0064                     ??_main 006C                     ?_cgets 0070  
                   ?_getch 0070                     _ADCON0 001F                     _ADCON1 009F  
                   ?_pulse 0070                     ?_putch 0070                     _TRISC0 0438  
           __CFG_PWRTE$OFF 0000                     ___wmul 0265          __end_of_UART_init 02D6  
                   _getche 02F3                     cgets@c 0060                     cgets@s 0062  
                   _printf 0092                  ??_isdigit 0074                     saved_w 007E  
                   pulse@i 0078    __end_of__initialization 001D          ?_manipula_entrada 0070  
           __pcstackCOMMON 0070              __end_of_cgets 016A         ??_manipula_entrada 0079  
            __end_of_getch 0307              __end_of_pulse 023D              __end_of_putch 02C2  
                  ??_cgets 0076                    ??_getch 0074                    ??_pulse 0074  
                  ??_putch 0074                 __pbssBANK0 0020                 __pmaintext 01D2  
                  ?___wmul 0074                 __pintentry 0004                    ?_getche 0070  
     __size_of_interrupcao 000F                    ?_printf 0075                 __stringtab 016A  
          __size_of___wmul 0027            __size_of_getche 000B                    __ptext1 028C  
                  __ptext2 0212                    __ptext3 0092                    __ptext4 023D  
                  __ptext5 0021                    __ptext6 02E5                    __ptext7 0265  
                  __ptext8 0101                    __ptext9 02F3                 _is_numeric 023D  
          __size_of_printf 006F                    _entrada 0020                    _isdigit 02E5  
                  cgets@s1 0063                    getche@c 0075                    clrloop0 0308  
     end_of_initialization 001D                    printf@c 0062                    printf@f 0065  
                _UART_init 02C2                  _TXSTAbits 0098             __end_of___wmul 028C  
           __end_of_getche 02FE                ?_is_numeric 0076                 ?_UART_init 0070  
           __end_of_printf 0101        start_initialization 0015  __size_of_manipula_entrada 0020  
              pulse@number 0077                   ??___wmul 0078                   ??_getche 0075  
                 ??_printf 0076                __pbssCOMMON 0079                  ___latbits 0002  
            __pcstackBANK0 0060        __size_of_is_numeric 0028              ??_interrupcao 0070  
                __pstrings 016A                ??_UART_init 0074                   ?_isdigit 0070  
           __size_of_cgets 0069             __size_of_getch 0009             __size_of_pulse 002B  
           __size_of_putch 0016          interrupt_function 0004             ___wmul@product 0060  
                clear_ram0 0307        __end_of_interrupcao 02E5                __stringbase 0179  
        ___wmul@multiplier 0074                 printf@flag 0060           _manipula_entrada 028C  
   manipula_entrada@number 006A               ??_is_numeric 0078         __end_of__stringtab 017A  
              _isdigit$367 0074           __size_of_isdigit 000E                   __ptext10 02AC  
                 __ptext11 02FE                   __ptext12 02C2                   __ptext13 02D6  
            __size_of_atoi 0071              __size_of_main 0040             _getchar_active 0079  
       __end_of_is_numeric 0265                _interrupcao 02D6                   atoi@sign 0066  
                putch@byte 0074                   isdigit@c 0075                   intlevel1 0000  
                stringcode 0174                   printf@ap 0061                   printf@cp 0063  
                 stringdir 0174                   stringtab 016A              is_numeric@res 0060  
            is_numeric@str 0062   __end_of_manipula_entrada 02AC  
